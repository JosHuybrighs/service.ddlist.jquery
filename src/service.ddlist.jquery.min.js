; (function ($, h, j, k) { var l = 'ddlist'; function Plugin(d, e) { this.element = d; this.selObj = $(d); this.settings = { width: 260, selectionIndex: 0, showSelectionTextOnly: false, onSelectedOnInit: false, onSelected: function (a, b, c) { } }; this._init(e) }; Plugin.prototype = { _selectIndex: function (a) { var b = this.ddListObj.find('> ul'); b.find('a').removeClass('ddListOptionIsSelected'); var c = b.find('a').eq(a); c.addClass('ddListOptionIsSelected'); var d = this.options[a]; this.selectedIndex = a; this.selectedValue = d.value; this.selectedText = d.text; this.selObj.find('option').attr('selected', false); var e = this.selObj.find('option').eq(a); e.attr('selected', true); var f = this.ddListObj.find('> a'); if (this.settings.showSelectionTextOnly) { f.html(d.text) } else { f.html((d.imageSrc ? '<img src="' + d.imageSrc + '" />' : '') + (d.text ? '<label>' + d.text + '</label>' : '') + (d.description ? '<small>' + d.description + '</small>' : '')) } }, _open: function () { var a = $('.ddListIsOpen').not(this.ddListObj); if (a.length != 0) { a.removeClass('ddListIsOpen'); a.find('> ul').slideUp(50) } this.ddListObj.find('> ul').slideDown('fast'); this.ddListObj.addClass('ddListIsOpen') }, _close: function () { this.ddListObj.removeClass('ddListIsOpen'); this.ddListObj.find('> ul').slideUp(50) }, _init: function (c) { this.settings = $.extend({}, this.settings, c); var d = this; this.options = []; this.selObj.find('option').each(function () { var a = $(this); d.options.push({ text: $.trim(a.text()), value: a.val(), selected: (a.attr('selected') == 'selected'), description: a.data('description'), imageSrc: a.data('imagesrc') }) }); this.selObj.hide(); this.ddListObj = $('<div id="ddList-' + this.selObj.attr('id') + '" class="ddListContainer"><a></a><span class="ddListArrow"></span><ul></ul></div>'); this.ddListObj.insertAfter(this.selObj); var f = this.ddListObj.find('> a'); f.css({ width: this.settings.width }); var g = this.ddListObj.find('> ul'); g.css({ width: this.settings.width }); $.each(this.options, function (a, b) { if (b.selected) { d.settings.selectionIndex = a } g.append('<li>' + '<a>' + (b.imageSrc ? ' <img' + (d.settings.imagePosition == "right" ? ' class="ddListImageRight"' : '') + ' src="' + b.imageSrc + '" />' : '') + (b.text ? ' <label>' + b.text + '</label>' : '') + (b.description ? ' <small>' + b.description + '</small>' : '') + '</a>' + '</li>') }); f.on('click.ddlist', function () { d._open() }); g.find('a').on('click.ddlist', function () { d._selectIndex($(this).closest('li').index()); d._close(); d.settings.onSelected.call(d, d.selectedIndex, d.selectedValue, d.selectedText) }); this.ddListObj.on('click.ddlist', function (e) { e.stopPropagation() }); $('body').on('click.ddlist', function () { d._close() }); this._selectIndex(this.settings.selectionIndex); if (this.settings.onSelectedOnInit) { this.settings.onSelected.call(this, this.selectedIndex, this.selectedValue, this.selectedText) } }, select: function (a) { var b = a[0]; if (b.index) { this.settings.selectionIndex = b.index; this._selectIndex(b.index, false) } else if (b.text) { for (var i = 0; i < this.options.length; i++) { if (this.options[i].text == b.text) { this.settings.selectionIndex = i; this._selectIndex(i); break } } } else if (b.value) { for (var i = 0; i < this.options.length; i++) { if (this.options[i].value == b.value) { this.settings.selectionIndex = i; this._selectIndex(i); break } } } }, }; $.fn[l] = function (a) { var b = $(this).data(l); if (b && a.indexOf('_') != 0) { return b[a](Array.prototype.slice.call(arguments, 1)) } if (typeof a === 'object' || !a) { b = new Plugin(this, a); $(this).data(l, b); return $(this) } $.error('Wrong call to ' + l) } })(jQuery);