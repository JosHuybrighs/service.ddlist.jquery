; (function ($, f, g, h) { var j = 'ddlist'; var k = 13, ESCAPE = 27, SPACE = 32, UP = 38, DOWN = 40; function Plugin(d, e) { this.element = d; this.selObj = $(d); this.settings = { width: 260, selectionIndex: 0, disabled: false, showSelectionTextOnly: false, onSelectedOnInit: false, onSelected: function (a, b, c) { }, itemsSource: null }; this._init(e) }; Plugin.prototype = { _selectIndex: function (a) { this.ddOptions.find('a').removeClass('ddListOptionIsSelected'); var b = this.ddOptions.find('a').eq(a); b.addClass('ddListOptionIsSelected'); var c = this.options[a]; this.selectedIndex = a; this.selectedValue = c.value; this.selectedText = c.text; if (this.settings.itemsSource == null) { this.selObj.find('option').attr('selected', false); var d = this.selObj.find('option').eq(a); d.attr('selected', true) } if (this.settings.showSelectionTextOnly) { this.ddSelection.html(c.text) } else { this.ddSelection.html((c.imageSrc ? '<img src="' + c.imageSrc + '" />' : '') + (c.text ? '<label>' + c.text + '</label>' : '') + (c.description ? '<small>' + c.description + '</small>' : '')) } }, _open: function () { var a = $('.ddListIsOpen').not(this.ddListObj); if (a.length != 0) { a.removeClass('ddListIsOpen'); a.find('> ul').slideUp(50) } this.ddListObj.find('> ul').slideDown('fast'); this.ddListObj.addClass('ddListIsOpen') }, _close: function () { this.ddListObj.removeClass('ddListIsOpen'); this.ddListObj.find('> ul').slideUp(50) }, _enable: function () { var a = this; this.settings.disabled = false; this.ddListObj.removeClass('ddListDisabled'); this.ddSelection.on('click.ddlist', function () { a._open() }); this.ddOptions.find('a').on('click.ddlist', function () { a._selectIndex($(this).closest('li').index()); a._close(); a.settings.onSelected.call(a, a.selectedIndex, a.selectedValue, a.selectedText) }); this.ddListObj.on('click.ddlist', function (e) { e.stopPropagation() }); $('body').on('click.ddlist-' + this.selObj.attr('id'), function () { a._close() }) }, _disable: function () { this.settings.disabled = true; $('body').off('.ddlist-' + this.selObj.attr('id')); this.ddListObj.off('.ddlist'); this.ddOptions.find('a').off('.ddlist'); this.ddSelection.off('.ddlist'); this.ddListObj.addClass('ddListDisabled') }, _bindListItems: function (c) { var d = this; $.each(this.options, function (a, b) { if (b.selected) { d.settings.selectionIndex = a } d.ddOptions.append('<li>' + '<a>' + (b.imageSrc ? ' <img src="' + b.imageSrc + '" />' : '') + (b.text ? ' <label>' + b.text + '</label>' : '') + (b.description ? ' <small>' + b.description + '</small>' : '') + '</a>' + '</li>') }); if (!c) { this._enable() } else { this.ddListObj.addClass('ddListDisabled') } this._selectIndex(this.settings.selectionIndex); if (this.settings.onSelectedOnInit) { this.settings.onSelected.call(this, this.selectedIndex, this.selectedValue, this.selectedText) } }, _unbindListItems: function () { this._disable(); this.ddOptions.empty() }, _init: function (b) { this.settings = $.extend({}, this.settings, b); var c = this; this.options = []; if (this.settings.itemsSource == null) { this.selObj.find('option').each(function () { var a = $(this); c.options.push({ text: $.trim(a.text()), value: a.val(), selected: (a.attr('selected') == 'selected'), description: a.data('description'), imageSrc: a.data('imagesrc') }) }) } else { this.options = this.settings.itemsSource } this.selObj.hide(); this.ddListObj = $('<div id="ddList-' + this.selObj.attr('id') + '" class="ddListContainer"><a></a><span class="ddListArrow"></span><ul></ul></div>'); this.ddListObj.insertAfter(this.selObj); this.ddSelection = this.ddListObj.find('> a'); this.ddSelection.css({ width: this.settings.width }); this.ddOptions = this.ddListObj.find('> ul'); this.ddOptions.css({ width: this.settings.width }); if (!this.settings.disabled) { this.settings.disabled = this.selObj.is(':disabled') } this._bindListItems(this.settings.disabled) }, select: function (a) { var b = a[0]; if (b.index) { this.settings.selectionIndex = b.index; this._selectIndex(b.index, false) } else if (b.text) { for (var i = 0; i < this.options.length; i++) { if (this.options[i].text == b.text) { this.settings.selectionIndex = i; this._selectIndex(i); break } } } else if (b.value) { for (var i = 0; i < this.options.length; i++) { if (this.options[i].value == b.value) { this.settings.selectionIndex = i; this._selectIndex(i); break } } } }, enable: function (a) { var b = a[0]; if (b) { this._enable() } else { this._disable() } }, isDisabled: function () { return this.settings.disabled }, setItemsSource: function (a) { var b = this.settings.disabled; this._unbindListItems(); this.options = a[0]; this._bindListItems(b) }, }; $.fn[j] = function (a) { var b = $(this).data(j); if (b && a.indexOf('_') != 0) { return b[a](Array.prototype.slice.call(arguments, 1)) } if (typeof a === 'object' || !a) { b = new Plugin(this, a); $(this).data(j, b); return $(this) } $.error('Wrong call to ' + j) } })(jQuery);